namespace d::dou::compact {
            template<typename A, di O, di D, bool B, typename X>
                mono<A, O, D, B> operator*(mono<A, O, D, B> lhs, const X& r) { lhs*=r; return lhs; }
            template<typename A, di O, di D, bool B, typename X>
                mono<A, O, D, B> operator*(X r, mono<A, O, D, B> lhs) { lhs*=r; return lhs; }
            template<typename A, di O, di D, bool B, typename X>
                mono<A, O, D, B> operator/(mono<A, O, D, B> lhs, const X& r) { lhs/=r; return lhs; }
            template<typename A, di O, di D, bool B, typename X>
                mono<A, O, D, B> operator/(X r, mono<A, O, D, B> lhs) { lhs/=r; return lhs; }
            template<typename A, di O, di D, bool B, bool C>
                mono<A, O, D, B> operator+(mono<A, O, D, B> lhs, const mono<A, O, D, C>& r) { lhs+=r; return lhs; }
            template<typename A, di O, di D, bool B, bool C>
                mono<A, O, D, B> operator-(mono<A, O, D, B> lhs, const mono<A, O, D, C>& r) { lhs-=r; return lhs; }
}
