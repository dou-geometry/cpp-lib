#include<iostream>
#include <cassert>
#include<concepts>

namespace d::dou::geo::rk4 {
    template<bool runForever=false, typename R, typename F>
        requires x<R, F>
        R run(R cur, const F &f, const double tt) {
            d::coord<double> &pos, &vel, &acc;
            if constexpr(tracksTime<R>) {
                pos=cur.pos;
                vel=cur.vel;
                acc=cur.acc;
            } else {
                pos=new d::coord<double>(cur.dim);
                vel=cur;
                acc=new d::coord<double>(cur.dim);
            }
            assert(f(pos).dim==pos.dim &&
                    "Slope function within d::numerical::rk4::run() doesn't return d::coord with correct dimension");
            // Since d::coord is VLA and dim isn't const
            assert((tt==0)==runForever && 
                    "(tt==0)!=runForever");

            int loopTimes=(int)std::ceil(tt/d::dou::geo::rk4::h);

            constexpr bool log=(d::dyn::Loggable<R>&&!runForever);
            if constexpr(log) {
                assert(cur.log==nullptr&&
                        "Log of d::dyn::mono in d::numerical::rk4::run() isn't empty");
                cur.log=(R*)malloc(sizeof(R)*(loopTimes+1));
            }

            double h=tt/((double)loopTimes), hh=h/2;
            while(true) { // WHy < not <= ?
                int i=0;
                if constexpr(!runForever) {
                    if(++i>=loopTimes)
                        break;
                        //goto rtrn;
                }
                if constexpr(runForever)
                    std::cout << "Notice: Infinite loop of d::numerical::rk4, logging is disable.\n\n";

                d::coord<double>   k1=f(acc),
                    k2=f(acc+d::coord<double>({hh*k1})),
                    k3=f(acc+d::coord<double>({hh*k2})),
                    k4=f(acc+d::coord<double>({hh*k3}));
                if constexpr(tracksTime<R>) cur.t+=h;
                acc+=(k1+2*k2+2*k3+k4)/6*h;
                if constexpr(log) cur.log[i]=cur;
                if constexpr(runForever) std::cout << cur << std::endl;
            }
rtrn:
            return cur;
        }
    template<typename C> d::dyn::mono<C> run(const d::dyn::mono<C>& x0, const std::function<C(C)> &f, const double s, const double t) { return run(x0, f, t-s); }
    template<typename C> C run(const C& x0, const std::function<C(C)> &f, const double s, const double t) { return run(x0, f, t-s); }
    // Perhaps a duplicated version of the loop in run() could be made seperately.
    template<typename C> d::dyn::mono<C> next(d::dyn::mono<C>) {}
}
